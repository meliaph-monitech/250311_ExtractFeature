Skip to content
Navigation Menu
meliaph-monitech
ExtractFeature

Type / to search
Code
Issues
Pull requests
Actions
Projects
Wiki
Security
Insights
Settings
Files
Go to file
t
requirements.txt
work_250311_extractfeatureui.py
ExtractFeature
/
work_250311_extractfeatureui.py
in
main

Edit

Preview
Indent mode

Spaces
Indent size

4
Line wrap mode

No wrap
Editing work_250311_extractfeatureui.py file contents
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
77
78
79
80
81
82
83
84
85
86
87
88
89
90
# -*- coding: utf-8 -*-
"""WORK_250311_ExtractFeatureUI.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ZMflS1GhPm-ICX9IJK5pJJPbwcBDjwHt
"""

import streamlit as st
import pandas as pd
import zipfile
import io
import os
import numpy as np
from scipy.stats import skew, kurtosis
from scipy.fftpack import fft, fftfreq
from scipy.signal import find_peaks

# Function to extract advanced features
def extract_advanced_features(signal, fs=1):
    features = {}
    n = len(signal)
    if n == 0:
        return {}

    # Statistical & time-domain features
    features['mean'] = np.mean(signal)
    features['std'] = np.std(signal)
    features['var'] = np.var(signal)
    features['min'] = np.min(signal)
    features['max'] = np.max(signal)
    features['median'] = np.median(signal)
    features['skewness'] = skew(signal)
    features['kurtosis'] = kurtosis(signal)
    features['peak_to_peak'] = np.ptp(signal)
    features['energy'] = np.sum(signal**2)
    features['rms'] = np.sqrt(np.mean(signal**2))

    # Frequency-domain features
    signal_fft = fft(signal)
    psd = np.abs(signal_fft)**2
    freqs = fftfreq(n, 1/fs)
    positive_freqs = freqs[:n // 2]
    positive_psd = psd[:n // 2]

    if len(positive_psd) > 0:
        features['dominant_frequency'] = positive_freqs[np.argmax(positive_psd)]
    else:
        features['dominant_frequency'] = 0

    return features

# Upload ZIP file
st.title("NVH Signal Processing & Feature Extraction")
uploaded_file = st.file_uploader("Upload ZIP File containing CSVs", type=["zip"])

if uploaded_file is not None:
    # Extract ZIP file
    with zipfile.ZipFile(uploaded_file, "r") as z:
        z.extractall("temp_data")
        csv_files = [f for f in os.listdir("temp_data") if f.endswith(".csv")]

    st.success(f"Extracted {len(csv_files)} CSV files.")

    # Load CSVs
    all_data = {}
    for file in csv_files:
        df = pd.read_csv(os.path.join("temp_data", file))
        all_data[file] = df

    # Select filter column & threshold
    sample_df = next(iter(all_data.values()))
    columns = sample_df.columns.tolist()
    filter_column = st.selectbox("Select Filter Column", columns)
    filter_threshold = st.number_input("Enter Filter Threshold", value=0.0)

    if st.button("Segment Beads"):
        st.write("Segmenting beads...")
        segmented_data = []

        for file, df in all_data.items():
            signal = df[filter_column].to_numpy()
            start_indices, end_indices = [], []
            i = 0
            while i < len(signal):
                if signal[i] > filter_threshold:
                    start = i
                    while i < len(signal) and signal[i] > filter_threshold:
                        i += 1
Use Control + Shift + m to toggle the tab key moving focus. Alternatively, use esc then tab to move to the next interactive element on the page.
@meliaph-monitech
meliaph-monitech
Owns this repository
Committed to this repository in the past day
Press escape to close this hovercard
Editing ExtractFeature/work_250311_extractfeatureui.py at main Â· meliaph-monitech/ExtractFeature
